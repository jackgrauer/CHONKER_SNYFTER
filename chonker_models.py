
# Core Models for CHONKER Phoenix - Generated by Pydantic Bot

from typing import List, Dict, Optional, Union, Literal
from pydantic import BaseModel, Field, validator
from datetime import datetime
from enum import Enum

class ColumnType(str, Enum):
    """SQL column types that CHONKER can infer"""
    TEXT = "TEXT"
    INTEGER = "INTEGER"
    REAL = "REAL"
    DATE = "DATE"
    BOOLEAN = "BOOLEAN"
    
class TableCell(BaseModel):
    """A single cell in an extracted table"""
    row: int
    col: int
    value: str
    original_value: str  # Before human edit
    edited: bool = False
    inferred_type: ColumnType = ColumnType.TEXT
    
class ExtractedTable(BaseModel):
    """A complete table extracted from PDF"""
    table_id: str = Field(default_factory=lambda: f"table_{datetime.now().timestamp()}")
    page_number: int
    headers: List[str]
    rows: List[List[str]]
    cells: List[TableCell] = []
    confidence_score: float = Field(ge=0.0, le=1.0)
    has_headers: bool = True
    
    @validator('headers')
    def clean_headers(cls, headers):
        """Ensure headers are SQL-safe"""
        import re
        cleaned = []
        for h in headers:
            # Replace spaces and special chars with underscore
            clean = re.sub(r'[^a-zA-Z0-9]', '_', h)
            clean = re.sub(r'_+', '_', clean).strip('_')
            cleaned.append(clean.lower() or f'column_{len(cleaned)}')
        return cleaned
        
class ChompResult(BaseModel):
    """Result of PDF chomping"""
    file_path: str
    file_size: int
    page_count: int
    processing_time: float
    tables: List[ExtractedTable]
    raw_text: str
    html_preview: str
    has_ocr_layer: bool
    extraction_method: Literal["native", "ocr", "hybrid"]
    
class HumanEdit(BaseModel):
    """Track human edits for SQL generation"""
    table_id: str
    cell: TableCell
    edit_type: Literal["value", "type", "header"]
    timestamp: datetime = Field(default_factory=datetime.now)
    
class SQLExportSettings(BaseModel):
    """Settings for SQL generation"""
    table_prefix: str = "imported_"
    infer_types: bool = True
    create_indexes: bool = True
    add_import_metadata: bool = True
    escape_strings: bool = True
    null_value: str = "NULL"
    
class GeneratedSQL(BaseModel):
    """The final SQL output"""
    create_statements: List[str]
    insert_statements: List[str] 
    index_statements: List[str] = []
    metadata_statements: List[str] = []
    total_rows: int
    total_tables: int
    generation_timestamp: datetime = Field(default_factory=datetime.now)
